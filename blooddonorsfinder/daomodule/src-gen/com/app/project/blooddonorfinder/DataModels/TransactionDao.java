package com.app.project.blooddonorfinder.DataModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.app.project.blooddonorfinder.DataModels.Transaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION".
*/
public class TransactionDao extends AbstractDao<Transaction, Long> {

    public static final String TABLENAME = "TRANSACTION";

    /**
     * Properties of entity Transaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionId = new Property(1, Long.class, "transactionId", false, "TRANSACTION_ID");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property HospitalId = new Property(3, Long.class, "hospitalId", false, "HOSPITAL_ID");
        public final static Property HospitalName = new Property(4, String.class, "hospitalName", false, "HOSPITAL_NAME");
        public final static Property HospitalAddress = new Property(5, String.class, "hospitalAddress", false, "HOSPITAL_ADDRESS");
        public final static Property Speciality = new Property(6, String.class, "speciality", false, "SPECIALITY");
        public final static Property PhoneNumber = new Property(7, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property Status = new Property(8, Integer.class, "status", false, "STATUS");
    };


    public TransactionDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TRANSACTION_ID\" INTEGER," + // 1: transactionId
                "\"USER_ID\" INTEGER," + // 2: userId
                "\"HOSPITAL_ID\" INTEGER," + // 3: hospitalId
                "\"HOSPITAL_NAME\" TEXT," + // 4: hospitalName
                "\"HOSPITAL_ADDRESS\" TEXT," + // 5: hospitalAddress
                "\"SPECIALITY\" TEXT," + // 6: speciality
                "\"PHONE_NUMBER\" TEXT," + // 7: phoneNumber
                "\"STATUS\" INTEGER);"); // 8: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long transactionId = entity.getTransactionId();
        if (transactionId != null) {
            stmt.bindLong(2, transactionId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        Long hospitalId = entity.getHospitalId();
        if (hospitalId != null) {
            stmt.bindLong(4, hospitalId);
        }
 
        String hospitalName = entity.getHospitalName();
        if (hospitalName != null) {
            stmt.bindString(5, hospitalName);
        }
 
        String hospitalAddress = entity.getHospitalAddress();
        if (hospitalAddress != null) {
            stmt.bindString(6, hospitalAddress);
        }
 
        String speciality = entity.getSpeciality();
        if (speciality != null) {
            stmt.bindString(7, speciality);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(8, phoneNumber);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Transaction readEntity(Cursor cursor, int offset) {
        Transaction entity = new Transaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // transactionId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // hospitalId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hospitalName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hospitalAddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // speciality
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phoneNumber
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setHospitalId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setHospitalName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHospitalAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpeciality(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoneNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Transaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Transaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
