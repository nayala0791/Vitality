package com.app.project.blooddonorfinder.DataModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.app.project.blooddonorfinder.DataModels.Donor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DONOR".
*/
public class DonorDao extends AbstractDao<Donor, Long> {

    public static final String TABLENAME = "DONOR";

    /**
     * Properties of entity Donor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property BloodGroup = new Property(3, String.class, "bloodGroup", false, "BLOOD_GROUP");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property NumberOfDonation = new Property(6, Integer.class, "numberOfDonation", false, "NUMBER_OF_DONATION");
        public final static Property ReadyToDonate = new Property(7, Integer.class, "readyToDonate", false, "READY_TO_DONATE");
        public final static Property PhoneNumber = new Property(8, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property AltPhoneNumber = new Property(9, String.class, "altPhoneNumber", false, "ALT_PHONE_NUMBER");
        public final static Property Address = new Property(10, String.class, "address", false, "ADDRESS");
        public final static Property LastKnownLocation = new Property(11, String.class, "lastKnownLocation", false, "LAST_KNOWN_LOCATION");
        public final static Property LastKnownTime = new Property(12, String.class, "lastKnownTime", false, "LAST_KNOWN_TIME");
    };


    public DonorDao(DaoConfig config) {
        super(config);
    }
    
    public DonorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DONOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"BLOOD_GROUP\" TEXT," + // 3: bloodGroup
                "\"GENDER\" TEXT," + // 4: gender
                "\"EMAIL\" TEXT," + // 5: email
                "\"NUMBER_OF_DONATION\" INTEGER," + // 6: numberOfDonation
                "\"READY_TO_DONATE\" INTEGER," + // 7: readyToDonate
                "\"PHONE_NUMBER\" TEXT," + // 8: phoneNumber
                "\"ALT_PHONE_NUMBER\" TEXT," + // 9: altPhoneNumber
                "\"ADDRESS\" TEXT," + // 10: address
                "\"LAST_KNOWN_LOCATION\" TEXT," + // 11: lastKnownLocation
                "\"LAST_KNOWN_TIME\" TEXT);"); // 12: lastKnownTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DONOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Donor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String bloodGroup = entity.getBloodGroup();
        if (bloodGroup != null) {
            stmt.bindString(4, bloodGroup);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        Integer numberOfDonation = entity.getNumberOfDonation();
        if (numberOfDonation != null) {
            stmt.bindLong(7, numberOfDonation);
        }
 
        Integer readyToDonate = entity.getReadyToDonate();
        if (readyToDonate != null) {
            stmt.bindLong(8, readyToDonate);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(9, phoneNumber);
        }
 
        String altPhoneNumber = entity.getAltPhoneNumber();
        if (altPhoneNumber != null) {
            stmt.bindString(10, altPhoneNumber);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        String lastKnownLocation = entity.getLastKnownLocation();
        if (lastKnownLocation != null) {
            stmt.bindString(12, lastKnownLocation);
        }
 
        String lastKnownTime = entity.getLastKnownTime();
        if (lastKnownTime != null) {
            stmt.bindString(13, lastKnownTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Donor readEntity(Cursor cursor, int offset) {
        Donor entity = new Donor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bloodGroup
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // numberOfDonation
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // readyToDonate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phoneNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // altPhoneNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lastKnownLocation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // lastKnownTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Donor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBloodGroup(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNumberOfDonation(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReadyToDonate(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPhoneNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAltPhoneNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLastKnownLocation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLastKnownTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Donor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Donor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
